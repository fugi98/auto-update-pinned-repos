name: Auto Pin Repos

on:
  schedule:
    - cron: '*/05 * * * *' # Change this to the time you want
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  pin-repos:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install @octokit/graphql @octokit/rest node-fetch

      - name: Run Script to Pin Repos
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          node -e "
          (async () => {
            const { graphql } = await import('@octokit/graphql');
            const { Octokit } = await import('@octokit/rest');
            const fetch = (await import('node-fetch')).default;

            const octokit = new Octokit({
              auth: process.env.PAT,
              request: {
                fetch: fetch,
              },
            });

            async function pinRepositories() {
              try {
                const userResponse = await graphql(\`
                  query {
                    viewer {
                      login
                      id
                    }
                  }
                \`, {
                  headers: {
                    authorization: \`token \${process.env.PAT}\`,
                  },
                  request: {
                    fetch: fetch,
                  },
                });

                const reposResponse = await octokit.repos.listForAuthenticatedUser({
                  sort: 'updated',
                  per_page: 6,
                });

                const pinnedRepos = reposResponse.data.map(repo => repo.node_id);

                const unpinMutation = \`
                  mutation($repoIds: [ID!]!) {
                    unpinRepositories(input: {repositoryIds: $repoIds}) {
                      clientMutationId
                    }
                  }
                \`;

                const pinMutation = \`
                  mutation($repoId: ID!) {
                    pinRepository(input: {repositoryId: $repoId}) {
                      clientMutationId
                    }
                  }
                \`;

                await graphql(unpinMutation, {
                  repoIds: pinnedRepos,
                  headers: {
                    authorization: \`token \${process.env.PAT}\`,
                  },
                  request: {
                    fetch: fetch,
                  },
                });

                for (const repoId of pinnedRepos) {
                  await graphql(pinMutation, {
                    repoId,
                    headers: {
                      authorization: \`token \${process.env.PAT}\`,
                    },
                    request: {
                      fetch: fetch,
                    },
                  });
                }

              } catch (error) {
                console.error('Error pinning repositories:', error);
                process.exit(1);
              }
            }

            pinRepositories();
          })();
          "
